{
    "contents" : "\n\n#' Compute probability of \"significance agreement\" between replication and original study\n#'\n#' Given effect estimates and their variances for one or multiple original studies and variances for one or more\n#' replication studies, \n#' returns a vector of probabilities that the replication estimate is \"statistically significant\" and\n#' in the same direction\n#' as the original. Can be computed assuming no heterogeneity or allowing for heterogeneity. \n#' @param orig.y Effect estimate in the original study. Can be a vector for multiple original studies.\n#' @param orig.vy Estimated variance of effect estimate in the original study (i.e., its squared standard error).\n#' Can be a vector for multiple original studies.\n#' @param rep.vy Estimated variance of effect estimate in the replication study (i.e., its squared standard error).\n#' Can be a vector for multiple replication studies.\n#' @param t2 Optionally (if allowing for heterogeneity), the estimated variance of true effects across replication studies. \n#' @param null Null value for the hypothesis tests. \n#' @param alpha Alpha level for the hypothesis tests. \n#' @export\n#' @import stats\n#' @examples\n#' # replication estimates (Fisher's z scale) and SEs\n#' # from moral credential example in Mathur & VanderWeele\n#' # (in preparation)\n#' r.fis = c(0.303, 0.078, 0.113, -0.055, 0.056, 0.073,\n#' 0.263, 0.056, 0.002, -0.106, 0.09, 0.024, 0.069, 0.074,\n#' 0.107, 0.01, -0.089, -0.187, 0.265, 0.076, 0.082)\n#' \n#' r.SE = c(0.111, 0.092, 0.156, 0.106, 0.105, 0.057,\n#' 0.091, 0.089, 0.081, 0.1, 0.093, 0.086, 0.076,\n#' 0.094, 0.065, 0.087, 0.108, 0.114, 0.073, 0.105, 0.04)\n#' \n#' # how many do we expect to agree?\n#' sum( prob_signif_agree( orig.y = 0.21, orig.vy = 0.004, rep.vy = r.SE^2 ) )\n\n\nprob_signif_agree = Vectorize( function( orig.y, orig.vy, rep.vy, t2 = 0, null = 0, alpha = 0.05 ) {\n  \n  # check for bad input\n  if (orig.vy < 0) stop(\"Original study's variance cannot be negative\")\n  if (rep.vy < 0) stop(\"Replication study's variance cannot be negative\")\n  if (t2 < 0) stop(\"Heterogeneity cannot be negative\")\n  \n  pooled.SE = sqrt( 2 * t2 + orig.vy + rep.vy )\n  \n  crit = qnorm( 1 - (alpha/2) )\n  \n  # P( reject with effect in same direction as null )\n  if( orig.y > null ) P = 1 - pnorm( ( crit * sqrt( rep.vy ) + null - orig.y ) / pooled.SE )\n  else P = pnorm( ( -crit * sqrt( rep.vy ) + null - orig.y ) / pooled.SE )\n  \n  return(P)\n}, vectorize.args = c( \"orig.y\", \"orig.vy\", \"rep.vy\", \"null\" ) )\n\n\n\n\n\n#' Compute prediction interval for replication study given original\n#'\n#' Given effect estimates and their variances for one or multiple original studies and one or more replication studies, \n#' returns a vector stating whether each replication estimate is in its corresponding prediction interval. Assumes no heterogeneity.\n#' @param orig.y Effect estimate in the original study. Can be a vector for multiple original studies.\n#' @param orig.vy Estimated variance of effect estimate in the original study (i.e., its squared standard error).\n#' Can be a vector for multiple original studies.\n#' @param rep.y Effect estimate in the replication study.\n#' Can be a vector for multiple replication studies. Can be omitted, in which case function returns only the prediction\n#' interval. \n#' @param rep.vy Estimated variance of effect estimate in the replication study (i.e., its squared standard error).\n#' Can be a vector for multiple replication studies.\n#' @param level Coverage level of prediction interval. Typically 0.95.\n#' @export\n#' @import stats\n#' @examples\n#' # calculate prediction interval for a single replication study\n#' pred_int( orig.y = 1, orig.vy = .5, rep.y = 0.6,\n#' rep.vy = .2 )\n#' \n#' # calculate prediction intervals for a one-to-one design\n#' pred_int( orig.y = c(1, 1.3), orig.vy = c(.01, .6),\n#' rep.y = c(.6, .7), rep.vy = c(.01,.3) )\n#' \n#' # no need to pass rep.y if you only want the intervals\n#' pred_int( orig.y = c(1, 1.3), orig.vy = c(.01, .6),\n#' rep.vy = c(.01,.3) )\n#' \n#' # calculate prediction intervals for a many-to-one design\n#' pred_int( orig.y = c(1), orig.vy = c(.01), rep.y = c(.6, .7), rep.vy = c(.01,.3) )\n\npred_int = function( orig.y, orig.vy, rep.y = NULL, rep.vy, level = 0.95 ) {\n  \n  # check for bad input\n  if ( any( orig.vy < 0) ) stop(\"Original study's variance cannot be negative\")\n  if ( any(rep.vy < 0) ) stop(\"Replication study's variance cannot be negative\")\n  \n  # check that we have a sensible number of originals and replications\n  # should represent either a 1-1 design or a many-to-one design \n  if ( ! is.null(rep.y) ) {\n    one.to.one = ( max( length(orig.y), length(orig.vy), length(rep.y), length(rep.vy) ) == \n                     min( length(orig.y), length(orig.vy), length(rep.y), length(rep.vy) ) )\n    many.to.one = ( length(orig.y) == 1 ) & ( length(orig.vy) == 1 ) & ( length(rep.y) == length(rep.vy) )\n  } else {\n    one.to.one = ( max( length(orig.y), length(orig.vy), length(rep.vy) ) == \n                  min( length(orig.y), length(orig.vy), length(rep.vy) ) )\n    many.to.one = ( length(orig.y) == 1 ) & ( length(orig.vy) == 1 ) \n  }\n  \n  if ( one.to.one == FALSE & many.to.one == FALSE ) {\n    stop( \"\\nLengths of arguments do not make sense. For a one-to-one design, all arguments should have same length. \n          For many-to-one design, first two arguments should be length 1 and second two arguments should have\n          same length as each other.\")\n  }\n\n  # compute the pred interval\n  pooled.SE = sqrt( orig.vy + rep.vy )\n  alpha = 1 - level\n  lo = orig.y - qnorm(1 - alpha/2) * pooled.SE\n  hi = orig.y + qnorm(1 - alpha/2) * pooled.SE\n  \n  # check if the replication is in the prediction interval\n  if ( ! is.null(rep.y) ) {\n    rep.inside = (rep.y > lo) & (rep.y < hi)\n  } else rep.inside = NA\n  \n  return( list( int.lo = lo, int.hi = hi, rep.inside = rep.inside ) )\n  \n}\n\n\n\n\n#' Statistical consistency of original study with replication\n#'\n#' Given the original study's effect estimate and its variance, the estimated average true effect size in the \n#' replications, and the estimated heterogeneity in the replications, computes estimated probability that \n#' the original study would have an effect estimate at least as extreme as the observed value if the original\n#' and the replications in fact are statistically consistent. Allows for heterogeneity. \n#' @param orig.y Effect estimate in the original study. \n#' @param orig.vy Estimated variance of effect estimate in the original study (i.e., its squared standard error).\n#' @param yr Estimated average true effect size in the replications. \n#' @param t2 Estimated heterogeneity of true effect sizes in the replications. \n#' @param vyr Estimated variance of \\code{yr} (i.e., its squared standard error).\n#' @export\n#' @import metafor\n#' stats\n#' @details\n#' \\code{yr}, \\code{vyr}, and \\code{t2} can be estimated through, for example, random-effects meta-analysis or\n#' a mixed model fit to the individual subject data. See Mathur & VanderWeele (Appendix) for details of how to specify\n#' such models.  \n#' @examples\n#' # replication estimates (Fisher's z scale) and SEs\n#' # from moral credential example in Mathur and VanderWeele\n#' # (in preparation)\n#' r.fis = c(0.303, 0.078, 0.113, -0.055, 0.056, 0.073,\n#' 0.263, 0.056, 0.002, -0.106, 0.09, 0.024, 0.069, 0.074,\n#' 0.107, 0.01, -0.089, -0.187, 0.265, 0.076, 0.082)\n#' \n#' r.SE = c(0.111, 0.092, 0.156, 0.106, 0.105, 0.057,\n#' 0.091, 0.089, 0.081, 0.1, 0.093, 0.086, 0.076,\n#' 0.094, 0.065, 0.087, 0.108, 0.114, 0.073, 0.105, 0.04)\n#' \n#' # meta-analyze the replications\n#' library(metafor)\n#' m = rma.uni( yi = r.fis, vi = r.SE^2, measure = \"ZCOR\" ) \n#' \n#' p_orig( orig.y = 0.210, orig.vy = 0.062^2, \n#' yr = m$b, t2 = m$se.tau2^2,  vyr = m$vb )\n \np_orig = function( orig.y, orig.vy, yr, t2, vyr ) {\n\n  # check for bad input\n  if (orig.vy < 0) stop(\"Original study's variance cannot be negative\")\n  if (vyr < 0) stop(\"Replication point estimate's variance cannot be negative\")\n  if (t2 < 0) stop(\"Heterogeneity cannot be negative\")\n  \n  denom = sqrt( t2 + orig.vy + vyr )\n  Z = ( abs( orig.y - yr ) ) / denom\n  \n  pval = as.numeric( 2 * ( 1 - pnorm(Z) ) )\n  message(\"\\nIf the original study were statistically consistent with the replications,\n          the probability of an estimate in the original study as extreme or more extreme than actually observed is approximately:\\n\")\n  return(pval)\n}\n\n\n\n#' Probability of true effect stronger than threshold of scientific importance\n#'\n#' Given the original study's effect estimate and its variance, the estimated average true effect size in the \n#' replications, and the estimated heterogeneity in the replications, computes estimated probability that \n#' the original study would have an effect estimate at least as extreme as the observed value if the original\n#' and the replications in fact are statistically consistent. Allows for heterogeneity. \n#' @param q True effect size that is the threshold for \"scientific importance\"\n#' @param yr Average true effect estimated using replications\n#' @param vyr Estimated variance of above estimate\n#' @param t2 Heterogeneity of true effects estimated using replications\n#' @param vt2 Estimated variance of above estimate\n#' @param CI.level Confidence level as a proportion\n#' @param tail \\code{above} for the probability of an effect above \\code{q}; \\code{below} for\n#' the probability of an effect below \\code{q}.\n#' @export\n#' @import metafor\n#' stats\n#' @details\n#' \\code{yr}, \\code{vyr}, and \\code{t2} can be estimated through, for example, random-effects meta-analysis or\n#' a mixed model fit to the individual subject data. See Mathur & VanderWeele (Appendix) for details of how to specify\n#' such models.  \n#' @examples\n#' # replication estimates (Fisher's z scale) and SEs\n#' # from moral credential example in Mathur & VanderWeele\n#' # (in preparation)\n#' r.fis = c(0.303, 0.078, 0.113, -0.055, 0.056, 0.073,\n#' 0.263, 0.056, 0.002, -0.106, 0.09, 0.024, 0.069, 0.074,\n#' 0.107, 0.01, -0.089, -0.187, 0.265, 0.076, 0.082)\n#' \n#' r.SE = c(0.111, 0.092, 0.156, 0.106, 0.105, 0.057,\n#' 0.091, 0.089, 0.081, 0.1, 0.093, 0.086, 0.076,\n#' 0.094, 0.065, 0.087, 0.108, 0.114, 0.073, 0.105, 0.04)\n#' \n#' # meta-analyze the replications\n#' library(metafor)\n#' m = rma.uni( yi = r.fis, vi = r.SE^2, measure = \"ZCOR\" ) \n#' \n#' # probability of true effect above r = 0.10 = 28%\n#' # convert threshold on r scale to Fisher's z\n#' q = .5 * ( log(1 + 0.10) - log(1 - 0.10) )\n#' stronger_than( q = q, yr = m$b, t2 = m$tau2, vyr = m$vb, vt2 = m$se.tau2^2, \n#' tail=\"above\" )\n#' \n#' # probability of true effect equally strong in opposite direction = very small\n#' # convert threshold on r scale to Fisher's z\n#' q.star = .5 * ( log(1 - 0.10) - log(1 + 0.10) )\n#' stronger_than( q = q.star, yr = m$b, t2 = m$tau2, vyr = m$vb, vt2 = m$se.tau2^2, \n#' tail=\"below\" )\n\n\nstronger_than = function( q, yr, vyr=NULL, t2, vt2=NULL,\n                          CI.level=0.95, tail ) {\n  \n  # check for bad input\n  if ( !is.null(vyr) ) {\n    if (vyr < 0) stop(\"Replication point estimate's variance cannot be negative\")\n  }\n  \n  if ( !is.null(vt2) ) {\n    if (vt2 < 0) stop(\"Heterogeneity estimate's variance cannot be negative\")\n  }\n  \n  if (t2 < 0) stop(\"Heterogeneity cannot be negative\")\n  \n  \n  if( tail == \"above\" ) {\n    prob = as.numeric( 1 - pnorm( ( q - yr ) / sqrt(t2) ) )\n  }\n  \n  if( tail == \"below\" ) {\n    prob = as.numeric( pnorm( ( q - yr ) / sqrt(t2) ) )\n  }\n  \n  # SE\n  term1 = sqrt( ( vyr / t2 ) + ( vt2 * ( q - yr )^2 ) / ( 4 * t2^3 ) )\n  term2 = dnorm( ( q - yr ) / sqrt(t2) )\n  SE = as.numeric( term1 * term2 )\n  \n  # confidence interval\n  crit = abs( qnorm( (1 - CI.level)/2 ) )\n  CI.lo = max( 0, prob - crit * SE )\n  CI.hi = min( 1, prob + crit * SE )\n  \n  return( list( prob = prob, SE = SE, CI.lo = CI.lo, CI.hi = CI.hi ) ) \n}\n\n\n\n\n",
    "created" : 1506724105670.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1576265059",
    "id" : "E958FB61",
    "lastKnownWriteTime" : 1509577110,
    "path" : "~/Dropbox/Personal computer/Independent studies/RRR estimators/Replicate/R/Replicate.R",
    "project_path" : "R/Replicate.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}